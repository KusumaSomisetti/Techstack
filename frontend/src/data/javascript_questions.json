[
  {
    "question": "What is JavaScript?",
    "answer": "JavaScript is a high-level, interpreted scripting language primarily used to create dynamic and interactive effects within web browsers."
  },
  {
    "question": "What are the different data types in JavaScript?",
    "answer": "JavaScript supports data types such as Undefined, Null, Boolean, String, Symbol, Number, BigInt, and Object."
  },
  {
    "question": "What is the difference between var, let, and const?",
    "answer": "'var' is function-scoped, while 'let' and 'const' are block-scoped. 'const' is used for constants and cannot be reassigned."
  },
  {
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope before code execution."
  },
  {
    "question": "What is a closure in JavaScript?",
    "answer": "A closure is a function that has access to its own scope, the scope of the outer function, and the global scope."
  },
  {
    "question": "What is the difference between == and ===?",
    "answer": "== compares values after type coercion, while === compares both value and type (strict equality)."
  },
  {
    "question": "What are arrow functions?",
    "answer": "Arrow functions are a concise way to write functions using the => syntax and they do not bind their own 'this'."
  },
  {
    "question": "What is the event loop in JavaScript?",
    "answer": "The event loop handles asynchronous operations by pushing callbacks to the task queue and executing them when the call stack is clear."
  },
  {
    "question": "What is a promise in JavaScript?",
    "answer": "A Promise is an object representing the eventual completion or failure of an asynchronous operation."
  },
  {
    "question": "What is async/await in JavaScript?",
    "answer": "Async/await is a syntax to handle Promises in a more readable and synchronous-looking manner."
  },
  {
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' checks for value equality with type coercion, while '===' checks for both value and type equality."
  },
  {
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting is JavaScript’s default behavior of moving declarations to the top of the current scope during compilation."
  },
  {
    "question": "What is a closure in JavaScript?",
    "answer": "A closure is a function that has access to its own scope, the outer function's scope, and the global scope."
  },
  {
    "question": "What are arrow functions?",
    "answer": "Arrow functions are a concise syntax for writing functions, and they don’t bind their own 'this', 'arguments', or 'super'."
  },
  {
    "question": "What is the difference between 'null' and 'undefined'?",
    "answer": "'undefined' means a variable has been declared but not assigned a value; 'null' is an assignment value representing no value."
  },
  {
    "question": "What is the use of 'this' keyword in JavaScript?",
    "answer": "'this' refers to the object that is executing the current function."
  },
  {
    "question": "What is the difference between 'let', 'const', and 'var'?",
    "answer": "'var' is function-scoped, 'let' and 'const' are block-scoped. 'const' also prevents reassignment."
  },
  {
    "question": "What is event delegation?",
    "answer": "Event delegation is a technique where a parent element handles events on its child elements using event bubbling."
  },
  {
    "question": "What is the DOM?",
    "answer": "DOM (Document Object Model) is an interface that represents the structure of a web page as a tree of objects."
  },
  {
    "question": "What is the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code is executed sequentially, while asynchronous code allows other operations to run while waiting for tasks like I/O."
  },
  {
    "question": "What are Promises in JavaScript?",
    "answer": "Promises are objects representing the eventual completion or failure of an asynchronous operation."
  },
  {
    "question": "What are template literals?",
    "answer": "Template literals allow embedded expressions using backticks (`) and `${}` syntax for string interpolation."
  },
  {
    "question": "What is destructuring in JavaScript?",
    "answer": "Destructuring is a syntax that allows unpacking values from arrays or properties from objects into distinct variables."
  },
  {
    "question": "What is a callback function?",
    "answer": "A callback is a function passed into another function as an argument and invoked after some operation is completed."
  },
  {
    "question": "What is an IIFE (Immediately Invoked Function Expression)?",
    "answer": "An IIFE is a function that runs as soon as it is defined using `()` to wrap and immediately invoke it."
  },
  {
    "question": "What is the event loop in JavaScript?",
    "answer": "The event loop manages the execution of asynchronous callbacks using a queue and a call stack."
  },
  {
    "question": "What are JavaScript data types?",
    "answer": "Primitive types: string, number, boolean, null, undefined, symbol, bigint; Non-primitive: object, array, function."
  },
  {
    "question": "What is the spread operator?",
    "answer": "The spread operator (...) expands iterable elements like arrays into individual elements."
  },
  {
    "question": "What is the difference between 'apply', 'call', and 'bind'?",
    "answer": "'call' and 'apply' invoke functions with a given context, 'bind' returns a new function with bound context."
  },
  {
    "question": "What is the use of 'async' and 'await'?",
    "answer": "'async/await' simplifies asynchronous code by making it look synchronous and avoiding callback hell."
  },
  {
    "question": "What is 'use strict'?",
    "answer": "'use strict' enforces stricter parsing and error handling in JavaScript to avoid silent bugs."
  },
  {
    "question": "What is the difference between deep copy and shallow copy?",
    "answer": "A shallow copy copies references, while a deep copy duplicates all nested objects and arrays."
  },
  {
    "question": "How does prototypal inheritance work?",
    "answer": "Objects in JavaScript can inherit properties and methods from another object via their prototype chain."
  },
  {
    "question": "What is the 'typeof' operator?",
    "answer": "'typeof' is used to determine the type of a JavaScript variable."
  },
  {
    "question": "What are higher-order functions?",
    "answer": "Functions that take other functions as arguments or return them as results."
  },
  {
    "question": "What are pure functions?",
    "answer": "Pure functions return the same result for the same inputs and have no side effects."
  },
  {
    "question": "What is memoization?",
    "answer": "Memoization is an optimization technique to cache the results of expensive function calls."
  },
  {
    "question": "What is the difference between slice and splice?",
    "answer": "'slice' returns a shallow copy of a portion of an array, 'splice' modifies the original array by adding/removing elements."
  },
  {
    "question": "What is NaN in JavaScript?",
    "answer": "'NaN' stands for 'Not a Number' and indicates a value that is not a legal number."
  },
  {
    "question": "What is the difference between map, filter, and reduce?",
    "answer": "'map' transforms elements, 'filter' selects elements based on condition, 'reduce' reduces array to a single value."
  },
  {
    "question": "What is throttling and debouncing?",
    "answer": "Both control function execution rate. Throttling limits calls per interval; debouncing delays until inactivity."
  },
  {
    "question": "What are promises chaining?",
    "answer": "Promise chaining is the process of linking multiple `.then()` calls to handle dependent asynchronous tasks."
  },
  {
    "question": "What are ES6 modules?",
    "answer": "ES6 modules allow you to export and import variables, functions, and classes between files using `export` and `import` keywords."
  },
  {
    "question": "What is the difference between 'for...in' and 'for...of'?",
    "answer": "'for...in' iterates over object keys, 'for...of' iterates over iterable values like arrays."
  },
  {
    "question": "What is JSON and how is it used?",
    "answer": "JSON (JavaScript Object Notation) is a format for storing and transporting data, commonly used for APIs."
  },
  {
    "question": "What is the difference between function expression and declaration?",
    "answer": "Function declarations are hoisted; expressions are not and must be defined before use."
  },
  {
    "question": "What are generators in JavaScript?",
    "answer": "Generators are functions that can pause and resume their execution using the `function*` syntax and `yield` keyword."
  },
  {
    "question": "What is Symbol in JavaScript?",
    "answer": "Symbol is a primitive data type that represents a unique and immutable identifier."
  },
  {
    "question": "What is a WeakMap?",
    "answer": "A WeakMap is a collection of key/value pairs where keys are weakly referenced and must be objects."
  },
  {
    "question": "What are service workers?",
    "answer": "Service workers are scripts that run in the background to enable features like caching, push notifications, and offline support."
  }
]
